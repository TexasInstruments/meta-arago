From b495c8a8a2b4c5676d27a0a898d58ca83ba36a87 Mon Sep 17 00:00:00 2001
From: Rahul T R <r-ravikumar@ti.com>
Date: Mon, 4 Jul 2022 15:17:21 +0530
Subject: [PATCH] Adding support for bayer formats with IR component

Add support for bayer formats with IR component.
this is required for cameras like ov2312 which
captures both RGB and IR

Upstream-Status: Pending

Signed-off-by: Rahul T R <r-ravikumar@ti.com>
---
 sys/v4l2/ext/videodev2.h |  9 +++++++
 sys/v4l2/gstv4l2object.c | 52 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 61 insertions(+)

diff --git a/sys/v4l2/ext/videodev2.h b/sys/v4l2/ext/videodev2.h
index 2ceb1ca32d..e59363a29d 100644
--- a/sys/v4l2/ext/videodev2.h
+++ b/sys/v4l2/ext/videodev2.h
@@ -702,6 +702,15 @@ struct v4l2_pix_format {
 #define V4L2_PIX_FMT_SGBRG16 v4l2_fourcc('G', 'B', '1', '6') /* 16  GBGB.. RGRG.. */
 #define V4L2_PIX_FMT_SGRBG16 v4l2_fourcc('G', 'R', '1', '6') /* 16  GRGR.. BGBG.. */
 #define V4L2_PIX_FMT_SRGGB16 v4l2_fourcc('R', 'G', '1', '6') /* 16  RGRG.. GBGB.. */
+	/* Bayer formats - with IR component */
+#define V4L2_PIX_FMT_SRGGI10 v4l2_fourcc('R', 'G', 'I', '0') /* 10 RGBG.. GIrGIr.. */
+#define V4L2_PIX_FMT_SGRIG10 v4l2_fourcc('G', 'R', 'I', '0') /* 10 GRGB.. IrGIrG.. */
+#define V4L2_PIX_FMT_SBGGI10 v4l2_fourcc('B', 'G', 'I', '0') /* 10 BGRG.. GIrGIr.. */
+#define V4L2_PIX_FMT_SGBIG10 v4l2_fourcc('G', 'B', 'I', '0') /* 10 GBGR.. IrGIrG.. */
+#define V4L2_PIX_FMT_SGIRG10 v4l2_fourcc('G', 'I', 'R', '0') /* 10 GIrGIr.. RGBG.. */
+#define V4L2_PIX_FMT_SIGGR10 v4l2_fourcc('I', 'G', 'R', '0') /* 10 IrGIrG.. GRGB.. */
+#define V4L2_PIX_FMT_SGIBG10 v4l2_fourcc('G', 'I', 'B', '0') /* 10 GIrGIr.. BGRG.. */
+#define V4L2_PIX_FMT_SIGGB10 v4l2_fourcc('I', 'G', 'B', '0') /* 10 IrGIrG.. GBGR.. */
 
 /* HSV formats */
 #define V4L2_PIX_FMT_HSV24 v4l2_fourcc('H', 'S', 'V', '3')
diff --git a/sys/v4l2/gstv4l2object.c b/sys/v4l2/gstv4l2object.c
index 472a24ef55..9fe5dcc528 100644
--- a/sys/v4l2/gstv4l2object.c
+++ b/sys/v4l2/gstv4l2object.c
@@ -215,6 +215,16 @@ static const GstV4L2FormatDesc gst_v4l2_formats[] = {
   {MAP_ENC_FMT (SGRBG16, ENCODED),  GST_V4L2_BAYER},
   {MAP_ENC_FMT (SRGGB16, ENCODED),  GST_V4L2_BAYER},
 
+  /* Bayer formats - with IR component */
+  {MAP_ENC_FMT (SRGGI10, ENCODED),  GST_V4L2_BAYER},
+  {MAP_ENC_FMT (SGRIG10, ENCODED),  GST_V4L2_BAYER},
+  {MAP_ENC_FMT (SBGGI10, ENCODED),  GST_V4L2_BAYER},
+  {MAP_ENC_FMT (SGBIG10, ENCODED),  GST_V4L2_BAYER},
+  {MAP_ENC_FMT (SGIRG10, ENCODED),  GST_V4L2_BAYER},
+  {MAP_ENC_FMT (SIGGR10, ENCODED),  GST_V4L2_BAYER},
+  {MAP_ENC_FMT (SGIBG10, ENCODED),  GST_V4L2_BAYER},
+  {MAP_ENC_FMT (SIGGB10, ENCODED),  GST_V4L2_BAYER},
+
   /* compressed formats */
   {MAP_ENC_FMT (MJPEG, ENCODED),        GST_V4L2_CODEC},
   {MAP_ENC_FMT (JPEG, ENCODED),         GST_V4L2_CODEC},
@@ -1215,6 +1225,14 @@ gst_v4l2_object_format_get_rank (const struct v4l2_fmtdesc *fmt)
     case V4L2_PIX_FMT_SGBRG16:
     case V4L2_PIX_FMT_SGRBG16:
     case V4L2_PIX_FMT_SRGGB16:
+    case V4L2_PIX_FMT_SRGGI10:
+    case V4L2_PIX_FMT_SGRIG10:
+    case V4L2_PIX_FMT_SBGGI10:
+    case V4L2_PIX_FMT_SGBIG10:
+    case V4L2_PIX_FMT_SGIRG10:
+    case V4L2_PIX_FMT_SIGGR10:
+    case V4L2_PIX_FMT_SGIBG10:
+    case V4L2_PIX_FMT_SIGGB10:
       rank = BAYER_BASE_RANK;
       break;
 
@@ -1642,6 +1660,24 @@ gst_v4l2_object_v4l2fourcc_to_bare_struct (guint32 fourcc)
     case V4L2_PIX_FMT_SRGGB16:
       bayer_format = "rggb16le";
       break;
+    case V4L2_PIX_FMT_SRGGI10:
+    case V4L2_PIX_FMT_SGRIG10:
+    case V4L2_PIX_FMT_SBGGI10:
+    case V4L2_PIX_FMT_SGBIG10:
+    case V4L2_PIX_FMT_SGIRG10:
+    case V4L2_PIX_FMT_SIGGR10:
+    case V4L2_PIX_FMT_SGIBG10:
+    case V4L2_PIX_FMT_SIGGB10:
+      structure = gst_structure_new ("video/x-bayer", "format", G_TYPE_STRING,
+          fourcc == V4L2_PIX_FMT_SGRIG10 ? "grig10" :
+          fourcc == V4L2_PIX_FMT_SBGGI10 ? "bggi10" :
+          fourcc == V4L2_PIX_FMT_SGBIG10 ? "gbig10" :
+          fourcc == V4L2_PIX_FMT_SGIRG10 ? "girg10" :
+          fourcc == V4L2_PIX_FMT_SIGGR10 ? "iggr10" :
+          fourcc == V4L2_PIX_FMT_SGIBG10 ? "gibg10" :
+          fourcc == V4L2_PIX_FMT_SIGGB10 ? "iggb10" :
+          fourcc == V4L2_PIX_FMT_SRGGI10 ? "rggi10" : "bggi10", NULL);
+      break;
     case V4L2_PIX_FMT_SN9C10X:
       structure = gst_structure_new_empty ("video/x-sonix");
       break;
@@ -2063,6 +2099,22 @@ gst_v4l2_object_get_caps_info (GstV4l2Object * v4l2object, GstCaps * caps,
         fourcc = V4L2_PIX_FMT_SGRBG16;
       else if (!g_ascii_strcasecmp (format, "rggb16le"))
         fourcc = V4L2_PIX_FMT_SRGGB16;
+      else if (!g_ascii_strcasecmp (format, "rggi10"))
+        fourcc = V4L2_PIX_FMT_SRGGI10;
+      else if (!g_ascii_strcasecmp (format, "grig10"))
+        fourcc = V4L2_PIX_FMT_SGRIG10;
+      else if (!g_ascii_strcasecmp (format, "bggi10"))
+        fourcc = V4L2_PIX_FMT_SBGGI10;
+      else if (!g_ascii_strcasecmp (format, "gbig10"))
+        fourcc = V4L2_PIX_FMT_SGBIG10;
+      else if (!g_ascii_strcasecmp (format, "girg10"))
+        fourcc = V4L2_PIX_FMT_SGIRG10;
+      else if (!g_ascii_strcasecmp (format, "iggr10"))
+        fourcc = V4L2_PIX_FMT_SIGGR10;
+      else if (!g_ascii_strcasecmp (format, "gibg10"))
+        fourcc = V4L2_PIX_FMT_SGIBG10;
+      else if (!g_ascii_strcasecmp (format, "iggb10"))
+        fourcc = V4L2_PIX_FMT_SIGGB10;
     }
   } else if (g_str_equal (mimetype, "video/x-sonix")) {
     fourcc = V4L2_PIX_FMT_SN9C10X;
--
2.37.0
